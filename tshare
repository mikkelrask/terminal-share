#!/usr/bin/env bash
# tshare - Terminal output sharing utility with syntax highlighting
# Usage: tshare command [args...]

set -e

SERVER_URL="https://tshare.porgy-ruler.ts.net"
DEFAULT_SYNTAX="bash" 
CLIPBOARD_CMD="wl-copy" # Use xclip if you are x11

# Check for macOS
if [[ "$(uname)" == "Darwin" ]]; then
  CLIPBOARD_CMD="pbcopy"
fi

# Function to show help
show_help() {
  echo "tshare - Terminal output sharing utility"
  echo "Usage: tshare [options] command [args...]"
  echo
  echo "Options:"
  echo "  -h, --help            Show this help message"
  echo "  -s, --syntax SYNTAX   Specify syntax highlighting (default: auto-detected)"
  echo "  -n, --no-clipboard    Don't copy URL to clipboard"
  echo "  -q, --quiet           Suppress command output (only show URL)"
  echo "  -u, --url URL         Specify server URL (default: $SERVER_URL)"
  echo
  echo "Examples:"
  echo "  tshare ls -la                # Share output of ls -la"
  echo "  tshare -s python script.py   # Share with Python syntax highlighting"
  echo "  tshare -q ls -la             # Share output silently (only show URL)"
  exit 0
}

# Detect syntax based on command
detect_syntax() {
  local cmd="$1"
  local args=($cmd)  # Split the command into an array
  local base_cmd=$(basename "${args[0]}")
  
  # For commands that didn't match above, look for file extensions
  # Find the first argument that looks like a file
  local file=""
  for arg in "${args[@]:1}"; do
    # Skip arguments that start with - (flags)
    if [[ "$arg" == -* ]]; then
      continue
    fi
    # Found a non-flag argument that might be a file
    file="$arg"
    break
  done
  
  local file_ext=""
  # Extract file extension if present
  if [[ "$file" == *"."* ]]; then
    file_ext="${file##*.}"
  fi
  
  # Check for direct command matches first
  if [[ "$base_cmd" == "python" || "$base_cmd" == "python2" || "$base_cmd" == "python3" || 
        "$base_cmd" == "ipython" || "$base_cmd" == "pytest" || "$base_cmd" == "uv" ]]; then
    echo "python"
    return 0
  elif [[ "$base_cmd" == "node" || "$base_cmd" == "npm" || "$base_cmd" == "npx" || 
           "$base_cmd" == "yarn" || "$base_cmd" == "pnpm" || "$base_cmd" == "bun" ]]; then
    echo "javascript"
    return 0
  elif [[ "$base_cmd" == "ruby" || "$base_cmd" == "irb" || "$base_cmd" == "rails" || 
           "$base_cmd" == "rake" || "$base_cmd" == "bundle" || "$base_cmd" == "gem" ]]; then
    echo "ruby"
    return 0
  elif [[ "$base_cmd" == "go" || "$base_cmd" == "gofmt" ]]; then
    echo "go"
    return 0
  elif [[ "$base_cmd" == "php" || "$base_cmd" == "composer" ]]; then
    echo "php"
    return 0
  elif [[ "$base_cmd" == "java" || "$base_cmd" == "javac" || "$base_cmd" == "gradle" || 
           "$base_cmd" == "mvn" ]]; then
    echo "java"
    return 0
  elif [[ "$base_cmd" == "docker" || "$base_cmd" == "docker-compose" || "$base_cmd" == "podman" ]]; then
    echo "dockerfile"
    return 0
  elif [[ "$base_cmd" == "terraform" || "$base_cmd" == "tf" ]]; then
    echo "hcl"
    return 0
  elif [[ "$base_cmd" == "kubectl" || "$base_cmd" == "helm" || "$base_cmd" == "k9s" ]]; then
    echo "yaml"
    return 0
  elif [[ "$base_cmd" == "ansible" || "$base_cmd" == "ansible-playbook" ]]; then
    echo "yaml"
    return 0
  elif [[ "$base_cmd" == "make" ]]; then
    echo "makefile"
    return 0
  fi
  
  # Special handling for common scripts with file extensions
  if [[ "$file_ext" == "py" ]]; then
    echo "python"
  elif [[ "$file_ext" == "js" || "$file_ext" == "jsx" || "$file_ext" == "ts" || "$file_ext" == "tsx" ]]; then
    echo "javascript"
  elif [[ "$file_ext" == "rb" ]]; then
    echo "ruby"
  elif [[ "$file_ext" == "go" ]]; then
    echo "go"
  elif [[ "$file_ext" == "php" ]]; then
    echo "php"
  elif [[ "$file_ext" == "java" || "$file_ext" == "kt" || "$file_ext" == "scala" ]]; then
    echo "java"
  elif [[ "$file_ext" == "rs" ]]; then
    echo "rust"
  elif [[ "$file_ext" == "cs" ]]; then
    echo "csharp"
  elif [[ "$file_ext" == "cpp" || "$file_ext" == "cc" || "$file_ext" == "c" || 
          "$file_ext" == "h" || "$file_ext" == "hpp" ]]; then
    echo "cpp"
  elif [[ "$file_ext" == "md" || "$file_ext" == "markdown" ]]; then
    echo "markdown"
  elif [[ "$file_ext" == "html" || "$file_ext" == "htm" ]]; then
    echo "html"
  elif [[ "$file_ext" == "css" || "$file_ext" == "scss" || "$file_ext" == "sass" ]]; then
    echo "css"
  elif [[ "$file_ext" == "xml" ]]; then
    echo "xml"
  elif [[ "$file_ext" == "json" ]]; then
    echo "json"
  elif [[ "$file_ext" == "yaml" || "$file_ext" == "yml" ]]; then
    echo "yaml"
  elif [[ "$file_ext" == "sql" ]]; then
    echo "sql"
  elif [[ "$file_ext" == "sh" || "$file_ext" == "bash" ]]; then
    echo "bash"
  elif [[ "$file_ext" == "ps1" ]]; then
    echo "powershell"
  else
    # Handle the case where uv is followed by a command (run, pip, etc.)
    if [[ "$base_cmd" == "uv" && "${args[1]}" == "run" && "${args[2]}" == *".py" ]]; then
      echo "python"
    else
      echo "bash"  # Default fallback
    fi
  fi
}

# Parse options
USE_CLIPBOARD=true
QUIET=false
SYNTAX_SPECIFIED=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      ;;
    -s|--syntax)
      DEFAULT_SYNTAX="$2"
      SYNTAX_SPECIFIED=true
      shift 2
      ;;
    -u|--url)
      SERVER_URL="$2"
      shift 2
      ;;
    -n|--no-clipboard)
      USE_CLIPBOARD=false
      shift
      ;;
    -q|--quiet)
      QUIET=true
      shift
      ;;
    *)
      break
      ;;
  esac
done

# Check if we have a command to execute
if [[ $# -eq 0 ]]; then
  echo "Error: No command specified"
  show_help
fi

# Capture command for display
COMMAND_STR="$*"

# Auto-detect syntax if not manually specified
if [[ "$SYNTAX_SPECIFIED" != "true" ]]; then
  DEFAULT_SYNTAX=$(detect_syntax "$COMMAND_STR")
  echo "Auto-detected syntax: $DEFAULT_SYNTAX"
fi

# Temporary file for command output
OUTPUT_FILE=$(mktemp)
# Also capture the exit code for proper handling
EXIT_CODE_FILE=$(mktemp)
# Set up cleanup trap for both normal exit and interruptions
trap 'handle_exit' EXIT INT TERM

# Function to handle clean exit and ensure upload happens
handle_exit() {
  local exit_code=$?
  if [[ -f "$EXIT_CODE_FILE" ]]; then
    exit_code=$(cat "$EXIT_CODE_FILE")
  fi
  
  # Always proceed with upload - especially important for failed commands (for troubleshooting)
  upload_and_show_url
  
  # Clean up temp files
  rm -f "$OUTPUT_FILE" "$EXIT_CODE_FILE"
  
  # Exit with original exit code
  exit $exit_code
}

# Function to upload content and display URL
upload_and_show_url() {
  # Read content
  CONTENT=$(cat "$OUTPUT_FILE")
  
  # Function to escape JSON strings
  escape_json() {
    local content="$1"
    content="${content//\\/\\\\}"         # Escape backslashes
    content="${content//\"/\\\"}"         # Escape double quotes
    content="${content//$'\n'/\\n}"       # Escape newlines
    content="${content//$'\t'/\\t}"       # Escape tabs
    content="${content//$'\r'/\\r}"       # Escape carriage returns
    echo "$content"
  }
  
  # Upload to the server
  if [[ "$QUIET" != "true" ]]; then
    echo "Handling output... (Press 'CTRL+C' to cancel..)"
  fi
  
  if command -v curl &> /dev/null; then
    ESCAPED_CONTENT=$(escape_json "$CONTENT")
    ESCAPED_COMMAND=$(escape_json "$COMMAND_STR")
    ESCAPED_DIR=$(escape_json "$WORKING_DIR")
  
    RESPONSE=$(curl -s -X POST "$SERVER_URL/api/paste" \
         -H "Content-Type: application/json" \
         -d "{
           \"content\": \"$ESCAPED_CONTENT\",
           \"command\": \"$ESCAPED_COMMAND\",
           \"hostname\": \"$HOSTNAME\",
           \"workingDir\": \"$ESCAPED_DIR\",
           \"syntax\": \"$DEFAULT_SYNTAX\"
         }")
  
    # Extract URL from response
    URL=$(echo "$RESPONSE" | grep -o '"url":"[^"]*"' | sed 's/"url":"\(.*\)"/\1/')
  
    if [[ -z "$URL" ]]; then
      echo "Error: Failed to get URL from server response"
      echo "Server response: $RESPONSE"
      return 1
    fi
  else
    echo "Error: curl is required for this script"
    return 1
  fi
  
  # Output the URL with better visibility
  echo ""  # Blank line before URL
  if [[ -t 1 ]]; then  # Check if stdout is a terminal
    echo -e "\e[1mShare URL: $URL\e[0m"  # Bold if terminal supports it
  else
    echo "Share URL: $URL"
  fi
  
  # Copy to clipboard if available
  if [[ "$USE_CLIPBOARD" == "true" ]]; then
    if eval "$CLIPBOARD_CMD" <<< "$URL" 2>/dev/null; then
      if [[ "$QUIET" != "true" ]]; then
        echo "URL copied to clipboard"
      fi
    else
      if [[ "$QUIET" != "true" ]]; then
        echo "Clipboard command failed or not available"
      fi
    fi
  fi
}

# Get system info
HOSTNAME=$(hostname)
WORKING_DIR=$(pwd)

# Run the command and capture output
if [[ "$QUIET" == "true" ]]; then
  "$@" > "$OUTPUT_FILE" 2>&1
  echo $? > "$EXIT_CODE_FILE"
else
  echo "Running: $COMMAND_STR"
  "$@" | tee "$OUTPUT_FILE"
  echo ${PIPESTATUS[0]} > "$EXIT_CODE_FILE"
fi

# Rest of the script will be handled by the exit trap

