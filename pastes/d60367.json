{
  "content": "#!/usr/bin/env bash\n# tshare - Terminal output sharing utility with syntax highlighting\n# Usage: tshare command [args...]\n\nset -e\n\n# Configuration - Change the server URL to your own deployment\nSERVER_URL=\"http://localhost:3000\"\nDEFAULT_SYNTAX=\"bash\" # Default syntax highlighting\nCLIPBOARD_CMD=\"xclip -selection clipboard\" # Use pbcopy on macOS\n\n# Check for macOS\nif [[ \"$(uname)\" == \"Darwin\" ]]; then\n  CLIPBOARD_CMD=\"pbcopy\"\nfi\n\n# Function to show help\nshow_help() {\n  echo \"tshare - Terminal output sharing utility\"\n  echo \"Usage: tshare [options] command [args...]\"\n  echo\n  echo \"Options:\"\n  echo \"  -h, --help            Show this help message\"\n  echo \"  -s, --syntax SYNTAX   Specify syntax highlighting (default: bash)\"\n  echo \"  -n, --no-clipboard    Don't copy URL to clipboard\"\n  echo \"  -u, --url URL         Specify server URL (default: $SERVER_URL)\"\n  echo\n  echo \"Examples:\"\n  echo \"  tshare ls -la                # Share output of ls -la\"\n  echo \"  tshare -s python script.py   # Share with Python syntax highlighting\"\n  exit 0\n}\n\n# Parse options\nUSE_CLIPBOARD=true\nwhile [[ $# -gt 0 ]]; do\n  case \"$1\" in\n    -h|--help)\n      show_help\n      ;;\n    -s|--syntax)\n      DEFAULT_SYNTAX=\"$2\"\n      shift 2\n      ;;\n    -u|--url)\n      SERVER_URL=\"$2\"\n      shift 2\n      ;;\n    -n|--no-clipboard)\n      USE_CLIPBOARD=false\n      shift\n      ;;\n    *)\n      break\n      ;;\n  esac\ndone\n\n# Check if we have a command to execute\nif [[ $# -eq 0 ]]; then\n  echo \"Error: No command specified\"\n  show_help\nfi\n\n# Temporary file for command output\nOUTPUT_FILE=$(mktemp)\ntrap 'rm -f \"$OUTPUT_FILE\"' EXIT\n\n# Capture command for display\nCOMMAND_STR=\"$*\"\n\n# Get system info\nHOSTNAME=$(hostname)\nWORKING_DIR=$(pwd)\n\n# Run the command and capture output\necho \"Running: $COMMAND_STR\"\n\"$@\" | tee \"$OUTPUT_FILE\"\n\n# Check if file is empty\nif [[ ! -s \"$OUTPUT_FILE\" ]]; then\n  echo \"No output to share\"\n  exit 1\nfi\n\n# Read content\nCONTENT=$(cat \"$OUTPUT_FILE\")\n\n# Function to escape JSON strings\nescape_json() {\n  local content=\"$1\"\n  content=\"${content//\\\\/\\\\\\\\}\"         # Escape backslashes\n  content=\"${content//\\\"/\\\\\\\"}\"         # Escape double quotes\n  content=\"${content//$'\\n'/\\\\n}\"       # Escape newlines\n  content=\"${content//$'\\t'/\\\\t}\"       # Escape tabs\n  content=\"${content//$'\\r'/\\\\r}\"       # Escape carriage returns\n  echo \"$content\"\n}\n\n# Upload to the server\necho \"Uploading output...\"\nif command -v curl &> /dev/null; then\n  ESCAPED_CONTENT=$(escape_json \"$CONTENT\")\n  ESCAPED_COMMAND=$(escape_json \"$COMMAND_STR\")\n  ESCAPED_DIR=$(escape_json \"$WORKING_DIR\")\n\n  RESPONSE=$(curl -s -X POST \"$SERVER_URL/api/paste\" \\\n       -H \"Content-Type: application/json\" \\\n       -d \"{\n         \\\"content\\\": \\\"$ESCAPED_CONTENT\\\",\n         \\\"command\\\": \\\"$ESCAPED_COMMAND\\\",\n         \\\"hostname\\\": \\\"$HOSTNAME\\\",\n         \\\"workingDir\\\": \\\"$ESCAPED_DIR\\\",\n         \\\"syntax\\\": \\\"$DEFAULT_SYNTAX\\\"\n       }\")\n\n  # Extract URL from response\n  URL=$(echo \"$RESPONSE\" | grep -o '\"url\":\"[^\"]*\"' | sed 's/\"url\":\"\\(.*\\)\"/\\1/')\n\n  if [[ -z \"$URL\" ]]; then\n    echo \"Error: Failed to get URL from server response\"\n    echo \"Server response: $RESPONSE\"\n    exit 1\n  fi\nelse\n  echo \"Error: curl is required for this script\"\n  exit 1\nfi\n\n# Output the URL\necho \"Share URL: $URL\"\n\n# Copy to clipboard if available\nif [[ \"$USE_CLIPBOARD\" == \"true\" ]]; then\n  if eval \"$CLIPBOARD_CMD\" <<< \"$URL\" 2>/dev/null; then\n    echo \"URL copied to clipboard\"\n  else\n    echo \"Clipboard command failed or not available\"\n  fi\nfi",
  "command": "cat .local/bin/tshare",
  "hostname": "dolores",
  "workingDir": "/home/mr",
  "syntax": "bash",
  "timestamp": "2025-04-13T20:04:53.761Z"
}